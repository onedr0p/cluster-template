{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    'docker:enableMajor',
    ':automergeBranch',
    ':dependencyDashboard',
    ':disableRateLimiting',
    ':semanticCommits',
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  suppressNotifications: [
    'prEditedNotification',
    'prIgnoreNotification',
  ],
  schedule: [
    'every weekend',
  ],
  ignorePaths: [
    '**/*.sops.*',
  ],
  flux: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  'helm-values': {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  helmfile: {
    fileMatch: [
      '(^|/)helmfile\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kubernetes: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kustomize: {
    fileMatch: [
      '(^|/)kustomization\\.ya?ml(?:\\.j2)?$',
    ],
  },
  pip_requirements: {
    fileMatch: [
      '(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)(?:\\.j2)?$',
    ],
  },
  packageRules: [
    {
      description: [
        'Auto-merge GitHub Actions for minor and patch',
      ],
      matchManagers: [
        'github-actions',
      ],
      automerge: true,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'minor',
        'patch',
      ],
    },
    {
      description: [
        'Flux Operator Group',
      ],
      groupName: 'Flux Operator',
      matchDatasources: [
        'docker',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      matchPackageNames: [
        '/flux-operator/',
        '/flux-instance/',
      ],
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      semanticCommitType: 'feat',
      commitMessagePrefix: '{{semanticCommitType}}({{semanticCommitScope}})!:',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'digest',
      ],
      semanticCommitType: 'chore',
      commitMessageExtra: '( {{currentDigestShort}} â†’ {{newDigestShort}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      semanticCommitScope: 'container',
      commitMessageTopic: 'image {{depName}}',
    },
    {
      matchDatasources: [
        'helm',
      ],
      semanticCommitScope: 'helm',
      commitMessageTopic: 'chart {{depName}}',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      semanticCommitType: 'ci',
      semanticCommitScope: 'github-action',
      commitMessageTopic: 'action {{depName}}',
    },
    {
      matchDatasources: [
        'github-releases',
      ],
      semanticCommitScope: 'github-release',
      commitMessageTopic: 'release {{depName}}',
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      labels: [
        'type/major',
      ],
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      labels: [
        'type/minor',
      ],
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      labels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      addLabels: [
        'renovate/container',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      addLabels: [
        'renovate/helm',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      addLabels: [
        'renovate/github-action',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
      ],
      addLabels: [
        'renovate/github-release',
      ],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: [
        'Process annotated dependencies',
      ],
      fileMatch: [
        '(^|/).+\\.env(?:\\.j2)?$',
        '(^|/).+\\.sh(?:\\.j2)?$',
        '(^|/).+\\.ya?ml(?:\\.j2)?$',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+(:\\s|=)(&\\S+\\s)?(?<currentValue>\\S+)',
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)\\n.+/(?<currentValue>(v|\\d)[^/]+)',
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
    },
  ],
}
